/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthVenuesRouteImport } from './routes/_auth.venues'
import { Route as AuthTagsRouteImport } from './routes/_auth.tags'
import { Route as AuthOrganizersRouteImport } from './routes/_auth.organizers'
import { Route as AuthEventsRouteImport } from './routes/_auth.events'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVenuesRoute = AuthVenuesRouteImport.update({
  id: '/venues',
  path: '/venues',
  getParentRoute: () => AuthRoute,
} as any)
const AuthTagsRoute = AuthTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => AuthRoute,
} as any)
const AuthOrganizersRoute = AuthOrganizersRouteImport.update({
  id: '/organizers',
  path: '/organizers',
  getParentRoute: () => AuthRoute,
} as any)
const AuthEventsRoute = AuthEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/events': typeof AuthEventsRoute
  '/organizers': typeof AuthOrganizersRoute
  '/tags': typeof AuthTagsRoute
  '/venues': typeof AuthVenuesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/events': typeof AuthEventsRoute
  '/organizers': typeof AuthOrganizersRoute
  '/tags': typeof AuthTagsRoute
  '/venues': typeof AuthVenuesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/events': typeof AuthEventsRoute
  '/_auth/organizers': typeof AuthOrganizersRoute
  '/_auth/tags': typeof AuthTagsRoute
  '/_auth/venues': typeof AuthVenuesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/events' | '/organizers' | '/tags' | '/venues'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/events' | '/organizers' | '/tags' | '/venues'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/events'
    | '/_auth/organizers'
    | '/_auth/tags'
    | '/_auth/venues'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/venues': {
      id: '/_auth/venues'
      path: '/venues'
      fullPath: '/venues'
      preLoaderRoute: typeof AuthVenuesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/tags': {
      id: '/_auth/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof AuthTagsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/organizers': {
      id: '/_auth/organizers'
      path: '/organizers'
      fullPath: '/organizers'
      preLoaderRoute: typeof AuthOrganizersRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/events': {
      id: '/_auth/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof AuthEventsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthEventsRoute: typeof AuthEventsRoute
  AuthOrganizersRoute: typeof AuthOrganizersRoute
  AuthTagsRoute: typeof AuthTagsRoute
  AuthVenuesRoute: typeof AuthVenuesRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthEventsRoute: AuthEventsRoute,
  AuthOrganizersRoute: AuthOrganizersRoute,
  AuthTagsRoute: AuthTagsRoute,
  AuthVenuesRoute: AuthVenuesRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
